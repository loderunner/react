name: build_and_test

on:
  workflow_dispatch:
  pull_request:
  push:

jobs:
  yarn_flags:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: yarn flags

  yarn_flow:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: node ./scripts/tasks/flow-ci

  check_generated_fizz_runtime:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: |
            yarn generate-inline-fizz-runtime
            git diff --quiet || (echo "There was a change to the Fizz runtime. Run `yarn generate-inline-fizz-runtime` and check in the result." && false)
  
  yarn_lint:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: node ./scripts/prettier/index
      - run: node ./scripts/tasks/eslint
      - run: ./scripts/circleci/check_license.sh
      - run: ./scripts/circleci/test_print_warnings.sh
  
  yarn_test:
    name: yarn_test-${{ matrix.args }}
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    strategy:
      matrix:
        args:
          # Intentionally passing these as strings instead of creating a
          # separate parameter per CLI argument, since it's easier to
          # control/see which combinations we want to run.
          - "-r=stable --env=development"
          - "-r=stable --env=production"
          - "-r=experimental --env=development"
          - "-r=experimental --env=production"
          - "-r=www-classic --env=development --variant=false"
          - "-r=www-classic --env=production --variant=false"
          - "-r=www-classic --env=development --variant=true"
          - "-r=www-classic --env=production --variant=true"
          - "-r=www-modern --env=development --variant=false"
          - "-r=www-modern --env=production --variant=false"
          - "-r=www-modern --env=development --variant=true"
          - "-r=www-modern --env=production --variant=true"
          - "-r=xplat --env=development --variant=false"
          - "-r=xplat --env=development --variant=true"
          - "-r=xplat --env=production --variant=false"
          - "-r=xplat --env=production --variant=true"

          # TODO: Test more persistent configurations?
          - '-r=stable --env=development --persistent'
          - '-r=experimental --env=development --persistent'
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: yarn test ${{ matrix.args }} --ci
  
  yarn_build:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: yarn build
      - uses: actions/upload-artifact@v4
        with:
          name: build
          path: build/**/*
  
  scrape_warning_messages:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup_node_modules
      - run: |
            mkdir -p ./build/__test_utils__
            node ./scripts/print-warnings/print-warnings.js > build/__test_utils__/ReactAllWarnings.js
      - uses: actions/upload-artifact@v4
        with:
          name: warning_messages
          path: build/**/*
  
  process_artifacts_combined:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - scrape_warning_messages
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: build
          merge-multiple: true
      - uses: ./.github/actions/setup_node_modules
      - run: echo "${{ github.sha }}" >> build/COMMIT_SHA
        # Compress build directory into a single tarball for easy download
      - run: tar -zcvf ./build.tgz ./build
        # TODO: Migrate scripts to use `build` directory instead of `build2`
      - run: cp ./build.tgz ./build2.tgz
      - uses: actions/upload-artifact@v4
        with:
          name: combined
          path: |
            ./build.tgz
            ./build2.tgz
  
  yarn_test_build:
    name: yarn_test_build-${{ matrix.args }}
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    strategy:
      matrix:
        args:
          # Intentionally passing these as strings instead of creating a
          # separate parameter per CLI argument, since it's easier to
          # control/see which combinations we want to run.
          - "-r=stable --env=development"
          - "-r=stable --env=production"
          - "-r=experimental --env=development"
          - "-r=experimental --env=production"

          # Dev Tools
          - "--project=devtools -r=experimental"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - run: yarn test --build ${{ matrix.args }} --ci
  
  yarn_lint_build:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - run: yarn lint-build
  
  yarn_check_release_dependencies:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - run: yarn check-release-dependencies
  
  check_error_codes:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - run: |
            yarn extract-errors
            git diff --quiet || (echo "Found unminified errors. Either update the error codes map or disable error minification for the affected build, if appropriate." && false)

  RELEASE_CHANNEL_stable_yarn_test_dom_fixtures:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - name: Restore yarn cache
        uses: actions/cache/restore@v4
        with:
          key: v2-yarn_cache-${{ runner.arch }}-${{ hashFiles('./yarn.lock') }}-fixtures/dom
          path: '~/.cache/yarn'
      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
        working-directory: fixtures/dom
      - name: Save yarn cache
        uses: actions/cache/save@v4
        with:
          key: v2-yarn_cache-${{ runner.arch }}-${{ hashFiles('./yarn.lock') }}-fixtures/dom
          path: '~/.cache/yarn'
      - run: |
          yarn predev
          yarn test --maxWorkers=2
        env:
          RELEASE_CHANNEL: stable
        working-directory: fixtures/dom
  
  build_devtools_and_process_artifacts:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
      - run: ./scripts/circleci/pack_and_store_devtools_artifacts.sh
        env:
          RELEASE_CHANNEL: experimental
      - uses: actions/upload-artifact@v4
        with:
          name: devtools
          path: |
            ./build/devtools.tgz
            ./build/devtools/chrome-extension.zip
            ./build/devtools/firefox-extension.zip
  
  run_devtools_e2e_tests:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - build_devtools_and_process_artifacts
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: build
          merge-multiple: true
      - uses: ./.github/actions/setup_node_modules
      - run: |
          npx playwright install
          sudo npx playwright install-deps
      - run: ./scripts/circleci/run_devtools_e2e_tests.js
        env:
          RELEASE_CHANNEL: experimental

  run_fixtures_flight_tests:
    runs-on: ubuntu-latest
    container:
      image: cimg/node:18.20.1-browsers
    env:
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    needs:
      - yarn_build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: build
          path: build
      - uses: ./.github/actions/setup_node_modules
        with:
          merge-multiple: true
      - name: Restore yarn cache of fixture
        uses: actions/cache/restore@v4
        with:
          key: v2-yarn_cache_fixtures_flight-${{ runner.arch }}-${{ hashFiles('./yarn.lock') }}
          path: '~/.cache/yarn'
      - run: yarn install --frozen-lockfile --cache-folder ~/.cache/yarn
        working-directory: fixtures/flight
      - name: Save yarn cache of fixture
        uses: actions/cache/save@v4
        with:
          key: v2-yarn_cache_fixtures_flight-${{ runner.arch }}-${{ hashFiles('./yarn.lock') }}
          path: '~/.cache/yarn'
      - run: |
            npx playwright install
            sudo npx playwright install-deps
        working-directory: fixtures/flight
      - run: yarn test
        working-directory: fixtures/flight
        env:
          DEBUG: pw:webserver
      - uses: actions/upload-artifact@v4
        with:
          name: fixtures_flight
          path: |
            fixtures/flight/playwright-report
            fixtures/flight/test-results
      
    


